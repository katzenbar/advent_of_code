defmodule ExAdvent.Y2021.Day20Test do
  use ExUnit.Case

  import ExAdvent.Y2021.Day20

  def sample_input() do
    ~s"""
    ..#.#..#####.#.#.#.###.##.....###.##.#..###.####..#####..#....#..#..##..##
    #..######.###...####..#..#####..##..#.#####...##.#.#..#.##..#.#......#.###
    .######.###.####...#.##.##..#..#..#####.....#.#....###..#.##......#.....#.
    .#..#..##..#...##.######.####.####.#.#...#.......#..#.#.#...####.##.#.....
    .#..#...##.#.##..#...##.#.##..###.#......#.#.......#.#.#.####.###.##...#..
    ...####.#..#..#.##.#....##..#.####....##...##..#...#......#.#.......#.....
    ..##..####..#...#.#.#...##..#.#..###..#####........#..####......#..#

    #..#.
    #....
    ##..#
    ..#..
    ..###
    """
  end

  def parsed_sample_input() do
    parse_input(sample_input())
  end

  test "parse input" do
    assert parsed_sample_input() ==
             {

               %{
                 {0, 0} => ?#,
                 {0, 1} => ?#,
                 {0, 2} => ?#,
                 {0, 3} => ?.,
                 {0, 4} => ?.,
                 {1, 0} => ?.,
                 {1, 1} => ?.,
                 {1, 2} => ?#,
                 {1, 3} => ?.,
                 {1, 4} => ?.,
                 {2, 0} => ?.,
                 {2, 1} => ?.,
                 {2, 2} => ?.,
                 {2, 3} => ?#,
                 {2, 4} => ?#,
                 {3, 0} => ?#,
                 {3, 1} => ?.,
                 {3, 2} => ?.,
                 {3, 3} => ?.,
                 {3, 4} => ?#,
                 {4, 0} => ?.,
                 {4, 1} => ?.,
                 {4, 2} => ?#,
                 {4, 3} => ?.,
                 {4, 4} => ?#
               },
               ?.
             }
  end

  test "image_map_to_string" do
    {_, image, _} = parsed_sample_input()

    assert image_map_to_string(image) ==
             ~s"""
             #..#.
             #....
             ##..#
             ..#..
             ..###
             """
  end

  test "apply_image_enhancement_algorithm" do
    {_, image, _} = apply_image_enhancement_algorithm(parsed_sample_input())

    assert image_map_to_string(image) ==
             ~s"""
             .........
             ..##.##..
             .#..#.#..
             .##.#..#.
             .####..#.
             ..#..##..
             ...##..#.
             ....#.#..
             .........
             """
  end

  test "apply_image_enhancement_algorithm - twice" do
    {_, image, _} =
      parsed_sample_input()
      |> apply_image_enhancement_algorithm()
      |> apply_image_enhancement_algorithm()

    assert image_map_to_string(image) ==
             ~s"""
             .............
             .............
             .........#...
             ...#..#.#....
             ..#.#...###..
             ..#...##.#...
             ..#.....#.#..
             ...#.#####...
             ....#.#####..
             .....##.##...
             ......###....
             .............
             .............
             """
  end

  test "count_lit_pixels" do
    result =
      parsed_sample_input()
      |> apply_image_enhancement_algorithm()
      |> apply_image_enhancement_algorithm()
      |> count_lit_pixels()

    assert result == 35
  end
end
